// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  username     String   @unique
  password     String
  tokenSecret  String?
  tokenVersion Int      @default(0)
  createdAt    DateTime @default(now()) @db.Timestamp(6)
  updatedAt    DateTime @updatedAt @db.Timestamp(6)

  // RELATIONS
  user User?
}

model User {
  id          Int      @id @default(autoincrement())
  displayName String?
  bio         String?
  location    String?
  job         String?
  website     String?
  img         String?
  cover       String?
  createdAt   DateTime @default(now()) @db.Timestamp(6)
  updatedAt   DateTime @updatedAt @db.Timestamp(6)

  // RELATIONS
  accountId Int     @unique
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  posts      Post[]
  likes      Like[]
  saves      SavedPosts[]
  followers  Follow[]     @relation("UserFollowers")
  followings Follow[]     @relation("UserFollowings")
}

model Post {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  desc        String?  @db.VarChar(255)
  img         String?
  imgHeight   Int?
  video       String?
  isSensitive Boolean  @default(false)

  // RELATIONS
  userId Int
  user   User @relation(fields: [userId], references: [id])

  rePostId Int?
  rePost   Post?  @relation("RePosts", fields: [rePostId], references: [id])
  rePosts  Post[] @relation("RePosts")

  parentPostId Int?
  parentPost   Post?  @relation("PostComments", fields: [parentPostId], references: [id])
  comments     Post[] @relation("PostComments")

  likes Like[]
  saves SavedPosts[]
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  // RELATIONS
  userId Int
  user   User @relation(fields: [userId], references: [id])

  postId Int
  post   Post @relation(fields: [postId], references: [id])
}

model SavedPosts {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  // RELATIONS
  userId Int
  user   User @relation(fields: [userId], references: [id])

  postId Int
  post   Post @relation(fields: [postId], references: [id])
}

model Follow {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  // RELATIONS
  followerId Int
  follower   User @relation("UserFollowers", fields: [followerId], references: [id])

  followingId Int
  following   User @relation("UserFollowings", fields: [followingId], references: [id])
}
